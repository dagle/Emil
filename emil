#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
# Copyright (C) 2011 Per Odlund <per.odlund@gmail.com>
# Copyright (C) 2011 GÃ¶ran Weinholt <goran@weinholt.se>

import gobject, gtk, webkit
import json

class EmilBuffer(gtk.VBox):
    """The EmilBuffer contains a web view, a status bar and a mini buffer."""
    def __init__(self, startUrl):
        self.startUrl=startUrl  # save for later
        gtk.VBox.__init__(self, homogeneous=False, spacing=0)
        self.view = webkit.WebView()
        self.view.connect("title-changed", self.title_changed_cb)
        self.view.connect("load-finished", self.load_finished_cb)
        self.view.load_string(open("emil.html").read(),'text/html','utf-8','')
        scroll = gtk.ScrolledWindow()
        scroll.add(self.view)
        self.add(scroll)
        self.pages = []         # Will keep WebViews for WWW pages

        self.status = webkit.WebView()
        self.status.set_property('height-request', 14 + 2)
        self.status.load_string(open("status.html").read(),'text/html','utf-8','')
        self.status.connect("title-changed", self.title_changed_cb)
        self.status.connect("load-finished", self.load_finished_cb)
        self.pack_start(self.status, expand=False, fill=False)

        self.minibuf = webkit.WebView()
        self.minibuf.set_property('height-request', 14 + 2)
        self.minibuf.load_string(open("minibuf.html").read(),'text/html','utf-8','')
        self.minibuf.connect("title-changed", self.title_changed_cb)
        self.minibuf.connect("load-finished", self.load_finished_cb)
        self.pack_end(self.minibuf, expand=False, fill=False)

        self.loads_completed = 0

        self.keymap = {}
        self.next_map = self.keymap
        self.current_prefix = ""

    def title_changed_cb(self, webview, frame, title):
        # The Emil JavaScript part communicates with the Python part
        # of Emil by setting its document title to JSON encoded
        # function calls.
        x = json.loads(title)
        if not x: return
        print "JSON request:",x
        if type(x) != type([]) or len(x)<1: return
        # TODO: make these into functions bound to some sort of object
        if x[0] == "global_key_set":
            (key,code)=x[1:]
            keymap = self.keymap
            keypresses = key.split()
            for keypress, idx in zip(keypresses,range(len(keypresses),0,-1)):
                if not keypress in keymap:
                    if idx > 1:
                        keymap[keypress]={}
                    else:
                        keymap[keypress]=code
                keymap = keymap[keypress]
            print 'new keymap:',self.keymap
        elif x[0] == "kill_emil":
            self.get_parent_window().destroy()
            gtk.main_quit()
        elif x[0] == "main_eval": self.view.execute_script(x[1])
        elif x[0] == "minibuf_eval": self.minibuf.execute_script(x[1])
        elif x[0] == "status_eval": self.status.execute_script(x[1])
        elif x[0] == 'main_focus': self.view.grab_focus()
        elif x[0] == 'minibuf_focus': self.minibuf.grab_focus()
        else:
            pass
            #self.update_minibuf("Undefined pycall: %s" % x)

    def load_finished_cb(self, view, frame):
        view.execute_script(open("emil.js").read())
        self.loads_completed += 1
        if self.loads_completed == 3:
            print "All three WebViews are finished loading."
            self.view.execute_script('init_emil();')
            if self.startUrl:
                self.view.execute_script("open_url(%s);" % json.dumps(self.startUrl));

    def key_press(self, key):
        def reset():
            self.next_map = self.keymap
            self.current_prefix = ""
        if not key in self.next_map:
            # The key was not bound. Pass it through to the focused webview.
            # self.view.execute_script('unused_key(%s);' %
            #                          json.dumps(self.current_prefix + " " + key))
            reset()
            return False
        b = self.next_map[key]
        print "Key:",key,"Binding:",b
        if type(b) == type({}):
            # The key pressed was a prefix key, like C-x.
            self.next_map = b
            self.current_prefix += key + " "
            return True
        elif type(b) == type(lambda:0):
            # The key is bound to a function.
            reset()
            b(self)
            return True
        elif type(b) == type("") or type(b) == type(u""):
            # Bound to JavaScript code
            reset()
            self.view.execute_script("("+b+")();")
            return True
        print "Key not bound to anything sane:",self.next_map,key
        reset()
        return False

class EmilWindow(gtk.Window):
    """These objects contain the whole GUI."""
    def __init__(self, startUrl):
        def destroyer(self):
            """This is called when the WM wants to close the window.
            Should destroy the EmilWindow and exit the program."""
            self.destroy()
            gtk.main_quit()
        gtk.Window.__init__(self)

        self.add(EmilBuffer(startUrl))
        self.connect('destroy', destroyer)
        self.connect('key-press-event', self.key_press)
        self.set_default_size(640, 480)
        self.show_all()

    def get_buffer(self):
        return self.get_child()

    def key_press(self, _, e):
        def handle(key):
            return self.get_buffer().key_press(unicode(key))
        if e.is_modifier: return False
        key = ''
        if (e.state & gtk.gdk.CONTROL_MASK)!=0: key += 'C-'
        if (e.state & gtk.gdk.MOD1_MASK)!=0: key += 'M-'
        char = gtk.gdk.keyval_to_unicode(e.keyval)
        if char != 0:
            return handle(key + unichr(char))
        name = gtk.gdk.keyval_name(e.keyval)
        return handle(key + name)

if __name__ == "__main__":
    import optparse
    parser = optparse.OptionParser('usage: %prog [options] [url]')
    (opts, args) = parser.parse_args()
    emil = EmilWindow(args and args[0])
    gtk.main()
