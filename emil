#!/usr/bin/env python
# -*- mode: python; coding: utf-8 -*-
# Copyright (C) 2011 Per Odlund <per.odlund@gmail.com>
# Copyright (C) 2011 GÃ¶ran Weinholt <goran@weinholt.se>

import gobject, gtk, webkit
import threading, BaseHTTPServer
import json

server_address = ('127.0.0.1', 1234)

welcome_page = """<html>
<body>
<p><h1>Hello, World!</h1></p>
<p><a href="http://%s:%d/">Local Emil server</a></p>
<p><a href="https://github.com/dagle/Emil">Emil's github website</a></p>
<p><a href="https://weinholt.se">Weinholt's website</a></p>
</body>
</html>""" % server_address

def update_minibuf(buf,msg):
    buf.minibuf.execute_script('update_minibuf(%s);' % json.dumps(msg))

class EmilBuffer(gtk.VBox):
    """The EmilBuffer contains a web view, a status bar and a mini buffer."""
    def __init__(self):
        gtk.VBox.__init__(self, homogeneous=False, spacing=0)
        self.view = webkit.WebView()
        self.view.connect("title-changed", self.title_changed)
        self.view.load_uri("http://%s:%d/" % server_address)
        scroll = gtk.ScrolledWindow()
        scroll.add(self.view)
        self.add(scroll)

        self.status = webkit.WebView()
        self.status.set_property('height-request', 14 + 2)
        self.status.load_uri("http://%s:%d/page/status.html" % server_address)
        self.pack_start(self.status, expand=False, fill=False)

        self.minibuf = webkit.WebView()
        self.minibuf.set_property('height-request', 14 + 2)
        self.minibuf.load_uri("http://%s:%d/page/minibuf.html" % server_address)
        self.pack_end(self.minibuf, expand=False, fill=False)

    def title_changed(self, webview, frame, title):
        self.status.execute_script('update_title(%s);' % json.dumps(title))

class EmilWindow(gtk.Window):
    """These objects contain the whole GUI."""
    def __init__(self):
        def destroyer(self):
            """This is called when the WM wants to close the window.
            Should destroy the EmilWindow and exit the program if this
            is the last window."""
            self.destroy()
            # TODO: when we support multiple windows, check for that here.
            gtk.main_quit()
        gtk.Window.__init__(self)

        self.add(EmilBuffer())
        self.connect('destroy', destroyer)
        self.connect('key-press-event', self.key_press)
        self.set_default_size(640, 480)
        self.show_all()

    def key_press(self, _, e):
        def handle(key):
            print key
            return False
        if e.is_modifier: return False
        key = ''
        if (e.state & gtk.gdk.CONTROL_MASK)!=0: key += 'C-'
        if (e.state & gtk.gdk.MOD1_MASK)!=0: key += 'M-'
        char = gtk.gdk.keyval_to_unicode(e.keyval)
        if char != 0:
            return handle(key + unichr(char))
        name = gtk.gdk.keyval_name(e.keyval)
        return handle(key + name)

class EmilServer(BaseHTTPServer.BaseHTTPRequestHandler):
    """This class represents the built-in web server."""
    # XXX: this whole thing is completely insecure.
    def do_GET(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        if self.path == '/':
            self.wfile.write(welcome_page)
        elif self.path.startswith('/page/'):
            f = open(self.path[len('/page/'):], 'r')
            while True:
                s = f.read(1024)
                if s == '': break
                self.wfile.write(s)
        else:
            self.wfile.write(repr(self.path) + '\n' + repr(dir(self)))

class ServerThread(threading.Thread):
    """This class is for the thread that runs the EmilServer."""
    def __init__(self, address):
        threading.Thread.__init__(self)
        self.listen_address = address
        self.daemon = True
    def run(self):
        BaseHTTPServer.HTTPServer(self.listen_address, EmilServer).serve_forever()

if __name__ == "__main__":
    emil = EmilWindow()
    server = ServerThread(server_address)
    server.start()
    gtk.gdk.threads_init()
    gtk.main()
